require('dotenv').config();
const express = require('express');
const multer = require('multer');
const mongoose = require('mongoose');
const path = require('path');
const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const session = require('express-session');

const app = express();
const PORT = 5000;

// Middleware
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// Session Configuration
app.use(session({
  secret: process.env.SESSION_SECRET || 'your-secret-key',
  resave: false,
  saveUninitialized: true,
}));

// Passport Initialization
app.use(passport.initialize());
app.use(passport.session());

// MongoDB Connection
mongoose.connect(process.env.MONGO_URI || 'mongodb://localhost:27017/imageUploadDB', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const userSchema = new mongoose.Schema({
  googleId: String,
  displayName: String,
});

const imageSchema = new mongoose.Schema({
  filename: String,
  path: String,
  userId: String,
});

const User = mongoose.model('User', userSchema);
const Image = mongoose.model('Image', imageSchema);

// Passport Google OAuth Strategy
passport.use(new GoogleStrategy({
  clientID: process.env.GOOGLE_CLIENT_ID || 'your-google-client-id',
  clientSecret: process.env.GOOGLE_CLIENT_SECRET || 'your-google-client-secret',
  callbackURL: `http://localhost:${PORT}/auth/google/callback`,
}, async (accessToken, refreshToken, profile, done) => {
  let user = await User.findOne({ googleId: profile.id });
  if (!user) {
    user = new User({
      googleId: profile.id,
      displayName: profile.displayName,
    });
    await user.save();
  }
  done(null, user);
}));

passport.serializeUser((user, done) => {
  done(null, user.id);
});

passport.deserializeUser(async (id, done) => {
  const user = await User.findById(id);
  done(null, user);
});

// Routes
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Image Upload</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          margin: 0;
          padding: 20px;
          background-color: #f4f4f4;
        }
        .container {
          max-width: 600px;
          margin: 0 auto;
          background: #fff;
          padding: 20px;
          box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        input[type="file"] {
          margin-bottom: 20px;
        }
        img {
          max-width: 100%;
          height: auto;
          display: block;
          margin-top: 20px;
        }
      </style>
    </head>
    <body>
      <div class="container">
        <h1>Upload Image</h1>
        <div id="auth">
          <a href="/auth/google">Login with Google</a>
        </div>
        <div id="uploadSection" style="display: none;">
          <input type="file" id="imageInput" accept="image/*">
          <button onclick="uploadImage()">Upload</button>
          <div id="preview"></div>
          <a href="/logout">Logout</a>
        </div>
      </div>

      <script>
        async function checkAuth() {
          const response = await fetch('/auth/status');
          const data = await response.json();
          if (data.authenticated) {
            document.getElementById('auth').style.display = 'none';
            document.getElementById('uploadSection').style.display = 'block';
          }
        }

        async function uploadImage() {
          const fileInput = document.getElementById('imageInput');
          const file = fileInput.files[0];
          if (!file) {
            alert('Please select an image.');
            return;
          }

          const formData = new FormData();
          formData.append('image', file);

          const response = await fetch('/upload', {
            method: 'POST',
            body: formData,
          });
          const data = await response.json();
          if (data.success) {
            const preview = document.getElementById('preview');
            preview.innerHTML = '<img src="${data.imageUrl}" alt="Uploaded Image">';
          } else {
            alert('Upload failed.');
          }
        }

        checkAuth();
      </script>
    </body>
    </html>
  `);
});

app.get('/auth/google', passport.authenticate('google', { scope: ['profile'] }));

app.get('/auth/google/callback', passport.authenticate('google', { failureRedirect: '/' }), (req, res) => {
  res.redirect('/');
});

app.get('/logout', (req, res) => {
  req.logout(() => {
    res.redirect('/');
  });
});

app.get('/auth/status', (req, res) => {
  res.json({ authenticated: req.isAuthenticated() });
});

// Multer Configuration for File Upload
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads/');
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + '-' + file.originalname);
  },
});

const upload = multer({ storage });

// Upload Endpoint (Protected Route)
app.post('/upload', upload.single('image'), async (req, res) => {
  if (!req.isAuthenticated()) {
    return res.status(401).json({ success: false, message: 'Unauthorized' });
  }

  try {
    const newImage = new Image({
      filename: req.file.filename,
      path: req.file.path,
      userId: req.user.id,
    });
    await newImage.save();
    res.json({ success: true, imageUrl: `http://localhost:${PORT}/uploads/${req.file.filename}` });
  } catch (error) {
    console.error(error);
    res.status(500).json({ success: false, message: 'Upload failed' });
  }
});

// Start Server
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});
